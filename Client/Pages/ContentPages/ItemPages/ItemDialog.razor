<SfDialog Width="280px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header>
            @Title
        </Header>
        <Content>
            <EditForm Enhance Model="ManageItem" OnValidSubmit="Save">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label class="form-label">Item Id</label>
                    <input @bind="ManageItem.ItemId" class="form-control" disabled />
                </div>
                <div class="form-group mt-3 mb-3">
                    <label class="form-label">Select Item Group</label>

                    @if (!string.IsNullOrEmpty(ManageItem.ItemGroup))
                    {
                        string selected = ManageItem!.ItemGroup;
                        <SfDropDownList TValue="string" TItem="ItemGroup" Placeholder="@selected" DataSource="ItemGroups">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="ItemGroup" ValueChange="OnItemGroupValueChange"></DropDownListEvents>

                        </SfDropDownList>
                        <ValidationMessage For="()=>ManageItem.ItemGroup" class="text-danger" />
                    }
                    else
                    {
                        <SfDropDownList TValue="string" TItem="ItemGroup" Placeholder="Select Item Group" DataSource="ItemGroups">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="ItemGroup" ValueChange="OnItemGroupValueChange"></DropDownListEvents>

                        </SfDropDownList>
                        <ValidationMessage For="()=>ManageItem.ItemGroup" class="text-danger" />
                    }


                </div>
                <div class="form-group mt-3 mb-3">
                    <label class="form-label">Select Unit</label>
                    @if (!string.IsNullOrEmpty(ManageItem.Unit))
                    {
                        string selected = ManageItem!.Unit;
                        <SfDropDownList TValue="string" TItem="Unit" Placeholder="@selected" DataSource="Units">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="Unit" ValueChange="OnUnitValueChange"></DropDownListEvents>

                        </SfDropDownList>
                        <ValidationMessage For="()=>ManageItem.Unit" class="text-danger" />
                    }
                    else
                    {
                        <SfDropDownList TValue="string" TItem="Unit" Placeholder="Select Unit" DataSource="Units">
                            <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="Unit" ValueChange="OnUnitValueChange"></DropDownListEvents>

                        </SfDropDownList>
                        <ValidationMessage For="()=>ManageItem.Unit" class="text-danger" />
                    }


                </div>
                <div class="form-group">
                    <label class="form-label">Quantity</label>
                    <input @bind="ManageItem.Quantity" class="form-control" />
                    <ValidationMessage For="()=>ManageItem.Quantity" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="form-label">UAH</label>
                    <input @bind="ManageItem.UAH" class="form-control" />
                    <ValidationMessage For="()=>ManageItem.UAH" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="form-label">Status</label>
                    <InputText @bind-Value="ManageItem.Status" class="form-control" />
                    <ValidationMessage For="()=>ManageItem.Status" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="form-label">Storage location</label>
                    <InputText @bind-Value="ManageItem.StorageLocation" class="form-control" />
                    <ValidationMessage For="()=>ManageItem.StorageLocation" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="form-label">Contact person</label>
                    <InputText @bind-Value="ManageItem.ContactPerson" class="form-control" />
                    <ValidationMessage For="()=>ManageItem.ContactPerson" class="text-danger" />
                </div>
                <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                    Save
                </button>
            </EditForm>
        </Content>
    </DialogTemplates>


</SfDialog>


@code {
    [Parameter] public ManageItem ManageItem { get; set; } = new();
    [Parameter] public List<Unit> Units { get; set; } = new();
    [Parameter] public List<ItemGroup> ItemGroups { get; set; } = new();
    [Parameter] public EventCallback<ManageItem> HandleSaveOperationEvent { get; set; } = new();
    public string Title { get; set; } = "Add";
    private bool IsVisible { get; set; } = false;
    private async void Save()
    {
        if ((ManageItem.ItemId <= 0 && Title != "Add item") || string.IsNullOrEmpty(ManageItem.Unit) || string.IsNullOrEmpty(ManageItem.ItemGroup))
            await dialogService.AlertAsync("You need to provide unit and/or item group.", "Alert");
        else
        {
            IsVisible = false;
            StateHasChanged();
            await HandleSaveOperationEvent.InvokeAsync(ManageItem);
        }


    }



    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void OnUnitValueChange(ChangeEventArgs<string, Unit> args)
    {
        ManageItem.Unit = args.Value.ToString();

    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }

    public void OnItemGroupValueChange(ChangeEventArgs<string, ItemGroup> args)
    {
        ManageItem.ItemGroup = args.Value.ToString();

    }

}
